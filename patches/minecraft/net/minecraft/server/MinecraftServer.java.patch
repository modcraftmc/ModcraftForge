--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -31,19 +31,12 @@
 import java.nio.file.Paths;
 import java.security.KeyPair;
 import java.text.SimpleDateFormat;
-import java.util.Arrays;
-import java.util.Base64;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Date;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Random;
-import java.util.UUID;
+import java.util.*;
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executor;
+import java.util.concurrent.TimeUnit;
 import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
@@ -134,6 +127,7 @@
 import net.minecraft.world.storage.loot.LootTableManager;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import net.minecraftforge.modcraftforge.common.theading.ModcraftThreadBox;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -147,7 +141,7 @@
    private final Snooper field_71307_n = new Snooper("server", this, Util.func_211177_b());
    private final File field_71308_o;
    private final List<Runnable> field_71322_p = Lists.newArrayList();
-   private final DebugProfiler field_71304_b = new DebugProfiler(this::func_71259_af);
+   public final DebugProfiler field_71304_b = new DebugProfiler(this::func_71259_af);
    private final NetworkSystem field_147144_o;
    protected final IChunkStatusListenerFactory field_213220_d;
    private final ServerStatusResponse field_147147_p = new ServerStatusResponse();
@@ -196,7 +190,7 @@
    private final GameProfileRepository field_152365_W;
    private final PlayerProfileCache field_152366_X;
    private long field_147142_T;
-   protected final Thread field_175590_aa = Util.func_200696_a(new Thread(this, "Server thread"), (p_213187_0_) -> {
+   protected final Thread field_175590_aa = Util.func_200696_a(new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, this, "Server thread"), (p_213187_0_) -> {
       p_213187_0_.setUncaughtExceptionHandler((p_213206_0_, p_213206_1_) -> {
          field_147145_h.error(p_213206_1_);
       });
@@ -221,6 +215,7 @@
    private final LootTableManager field_200256_aj = new LootTableManager(this.field_229734_an_);
    private final AdvancementManager field_200257_ak = new AdvancementManager();
    private final FunctionManager field_200258_al = new FunctionManager(this);
+   private final net.minecraftforge.common.loot.LootModifierManager lootManager = new net.minecraftforge.common.loot.LootModifierManager();
    private final FrameTimer field_213215_ap = new FrameTimer();
    private boolean field_205745_an;
    private boolean field_212205_ao;
@@ -230,6 +225,8 @@
    @Nullable
    private String field_213218_av;
 
+   private List<Runnable> worldsrunnable = new ArrayList<>();
+
    public MinecraftServer(File p_i50590_1_, Proxy p_i50590_2_, DataFixer p_i50590_3_, Commands p_i50590_4_, YggdrasilAuthenticationService p_i50590_5_, MinecraftSessionService p_i50590_6_, GameProfileRepository p_i50590_7_, PlayerProfileCache p_i50590_8_, IChunkStatusListenerFactory p_i50590_9_, String p_i50590_10_) {
       super("Server");
       this.field_110456_c = p_i50590_2_;
@@ -249,6 +246,7 @@
       this.field_195576_ac.func_219534_a(this.field_200256_aj);
       this.field_195576_ac.func_219534_a(this.field_200258_al);
       this.field_195576_ac.func_219534_a(this.field_200257_ak);
+      field_195576_ac.func_219534_a(lootManager);
       this.field_213217_au = Util.func_215072_e();
       this.field_71294_K = p_i50590_10_;
    }
@@ -336,6 +334,8 @@
       this.func_200245_b(new TranslationTextComponent("menu.loadingLevel"));
       SaveHandler savehandler = this.func_71254_M().func_197715_a(p_71247_1_, this);
       this.func_175584_a(this.func_71270_I(), savehandler);
+      // Move factory creation earlier to prevent startupquery deadlock
+      IChunkStatusListener ichunkstatuslistener = this.field_213220_d.create(11);
       WorldInfo worldinfo = savehandler.func_75757_d();
       WorldSettings worldsettings;
       if (worldinfo == null) {
@@ -357,13 +357,13 @@
 
       worldinfo.func_230145_a_(this.getServerModName(), this.func_230045_q_().isPresent());
       this.func_195560_a(savehandler.func_75765_b(), worldinfo);
-      IChunkStatusListener ichunkstatuslistener = this.field_213220_d.create(11);
       this.func_213194_a(savehandler, worldinfo, worldsettings, ichunkstatuslistener);
       this.func_147139_a(this.func_147135_j(), true);
       this.func_213186_a(ichunkstatuslistener);
    }
 
    protected void func_213194_a(SaveHandler p_213194_1_, WorldInfo p_213194_2_, WorldSettings p_213194_3_, IChunkStatusListener p_213194_4_) {
+      net.minecraftforge.common.DimensionManager.fireRegister();
       if (this.func_71242_L()) {
          p_213194_2_.func_176127_a(field_213219_c);
       }
@@ -407,6 +407,7 @@
          if (dimensiontype != DimensionType.field_223227_a_) {
             this.field_71305_c.put(dimensiontype, new ServerMultiWorld(serverworld1, this, this.field_213217_au, p_213194_1_, dimensiontype, this.field_71304_b, p_213194_4_));
          }
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(field_71305_c.get(dimensiontype)));
       }
 
    }
@@ -565,6 +566,7 @@
       for(ServerWorld serverworld1 : this.func_212370_w()) {
          if (serverworld1 != null) {
             try {
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(serverworld1));
                serverworld1.close();
             } catch (IOException ioexception) {
                field_147145_h.error("Exception closing the level", (Throwable)ioexception);
@@ -605,6 +607,7 @@
    public void run() {
       try {
          if (this.func_71197_b()) {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStarted(this);
             this.field_211151_aa = Util.func_211177_b();
             this.field_147147_p.func_151315_a(new StringTextComponent(this.field_71286_C));
             this.field_147147_p.func_151321_a(new ServerStatusResponse.Version(SharedConstants.func_215069_a().getName(), SharedConstants.func_215069_a().getProtocolVersion()));
@@ -636,9 +639,15 @@
                this.field_71304_b.func_219897_b();
                this.field_71296_Q = true;
             }
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStopping(this);
+            net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
          } else {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
             this.func_71228_a((CrashReport)null);
          }
+      } catch (net.minecraftforge.fml.StartupQuery.AbortedException e) {
+         // ignore silently
+         net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
       } catch (Throwable throwable1) {
          field_147145_h.error("Encountered an unexpected exception", throwable1);
          CrashReport crashreport;
@@ -655,6 +664,7 @@
             field_147145_h.error("We were unable to save this crash report to disk.");
          }
 
+         net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
          this.func_71228_a(crashreport);
       } finally {
          try {
@@ -663,6 +673,7 @@
          } catch (Throwable throwable) {
             field_147145_h.error("Exception stopping the server", throwable);
          } finally {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStopped(this);
             this.func_71240_o();
          }
 
@@ -764,6 +775,7 @@
 
    protected void func_71217_p(BooleanSupplier p_71217_1_) {
       long i = Util.func_211178_c();
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPreServerTick();
       ++this.field_71315_w;
       this.func_71190_q(p_71217_1_);
       if (i - this.field_147142_T >= 5000000000L) {
@@ -778,6 +790,7 @@
 
          Collections.shuffle(Arrays.asList(agameprofile));
          this.field_147147_p.func_151318_b().func_151330_a(agameprofile);
+         this.field_147147_p.invalidateJson();
       }
 
       if (this.field_71315_w % 6000 == 0) {
@@ -789,15 +802,19 @@
          field_147145_h.debug("Autosave finished");
       }
 
-      this.field_71304_b.func_76320_a("snooper");
-      if (!this.field_71307_n.func_76468_d() && this.field_71315_w > 100) {
-         this.field_71307_n.func_76463_a();
+      /*
+      this.profiler.startSection("snooper");
+      if (!this.snooper.isSnooperRunning() && this.tickCounter > 100) {
+         this.snooper.start();
       }
 
-      if (this.field_71315_w % 6000 == 0) {
-         this.field_71307_n.func_76471_b();
+
+      if (this.tickCounter % 6000 == 0) {
+         this.snooper.addMemoryStatsToSnooper();
       }
 
+       */
+
       this.field_71304_b.func_76319_b();
       this.field_71304_b.func_76320_a("tallying");
       long l = this.field_71311_j[this.field_71315_w % 100] = Util.func_211178_c() - i;
@@ -805,6 +822,7 @@
       long i1 = Util.func_211178_c();
       this.field_213215_ap.func_181747_a(i1 - i);
       this.field_71304_b.func_76319_b();
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPostServerTick();
    }
 
    protected void func_71190_q(BooleanSupplier p_71190_1_) {
@@ -812,34 +830,21 @@
       this.func_193030_aL().func_73660_a();
       this.field_71304_b.func_219895_b("levels");
 
-      for(ServerWorld serverworld : this.func_212370_w()) {
-         if (serverworld.field_73011_w.func_186058_p() == DimensionType.field_223227_a_ || this.func_71255_r()) {
-            this.field_71304_b.func_194340_a(() -> {
-               return serverworld.func_72912_H().func_76065_j() + " " + Registry.field_212622_k.func_177774_c(serverworld.field_73011_w.func_186058_p());
-            });
-            if (this.field_71315_w % 20 == 0) {
-               this.field_71304_b.func_76320_a("timeSync");
-               this.field_71318_t.func_148537_a(new SUpdateTimePacket(serverworld.func_82737_E(), serverworld.func_72820_D(), serverworld.func_82736_K().func_223586_b(GameRules.field_223607_j)), serverworld.field_73011_w.func_186058_p());
-               this.field_71304_b.func_76319_b();
-            }
+      worldsrunnable.clear();
 
-            this.field_71304_b.func_76320_a("tick");
+      for(ServerWorld serverworld : this.getWorldArray()) {
+         serverworld.tickWorld(p_71190_1_);
+      }
 
-            try {
-               serverworld.func_72835_b(p_71190_1_);
-            } catch (Throwable throwable) {
-               CrashReport crashreport = CrashReport.func_85055_a(throwable, "Exception ticking world");
-               serverworld.func_72914_a(crashreport);
-               throw new ReportedException(crashreport);
-            }
 
-            this.field_71304_b.func_76319_b();
-            this.field_71304_b.func_76319_b();
-         }
-      }
+      this.field_71304_b.func_219895_b("dim_unloading");
 
+         net.minecraftforge.common.DimensionManager.unloadWorlds(this, this.field_71315_w % 200 == 0);
+
       this.field_71304_b.func_219895_b("connection");
+
       this.func_147137_ag().func_151269_c();
+
       this.field_71304_b.func_219895_b("players");
       this.field_71318_t.func_72374_b();
       if (SharedConstants.field_206244_b) {
@@ -848,11 +853,12 @@
 
       this.field_71304_b.func_219895_b("server gui refresh");
 
-      for(int i = 0; i < this.field_71322_p.size(); ++i) {
-         this.field_71322_p.get(i).run();
+      for (Runnable tickable : this.field_71322_p) {
+         tickable.run();
       }
 
       this.field_71304_b.func_76319_b();
+
    }
 
    public boolean func_71255_r() {
@@ -878,6 +884,7 @@
       OptionSpec<Integer> optionspec10 = optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1);
       OptionSpec<String> optionspec11 = optionparser.accepts("serverId").withRequiredArg();
       OptionSpec<String> optionspec12 = optionparser.nonOptions();
+      optionparser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File(".")); //Forge: Consume this argument, we use it in the launcher, and the client side.
 
       try {
          OptionSet optionset = optionparser.parse(p_main_0_);
@@ -888,7 +895,7 @@
 
          Path path = Paths.get("server.properties");
          ServerPropertiesProvider serverpropertiesprovider = new ServerPropertiesProvider(path);
-         serverpropertiesprovider.func_219035_b();
+         if (optionset.has(optionspec1) || !Files.exists(path)) serverpropertiesprovider.func_219035_b();
          Path path1 = Paths.get("eula.txt");
          ServerEula servereula = new ServerEula(path1);
          if (optionset.has(optionspec1)) {
@@ -910,6 +917,10 @@
          GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
          PlayerProfileCache playerprofilecache = new PlayerProfileCache(gameprofilerepository, new File(s, field_152367_a.getName()));
          String s1 = Optional.ofNullable(optionset.valueOf(optionspec9)).orElse(serverpropertiesprovider.func_219034_a().field_219021_o);
+         if (s1 == null || s1.isEmpty() || new File(s, s1).getAbsolutePath().equals(new File(s).getAbsolutePath())) {
+            field_147145_h.error("Invalid world directory specified, must not be null, empty or the same directory as your universe! " + s1);
+            return;
+         }
          final DedicatedServer dedicatedserver = new DedicatedServer(new File(s), serverpropertiesprovider, DataFixesManager.func_210901_a(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache, LoggingChunkStatusListener::new, s1);
          dedicatedserver.func_71224_l(optionset.valueOf(optionspec7));
          dedicatedserver.func_71208_b(optionset.valueOf(optionspec10));
@@ -927,6 +938,7 @@
          Thread thread = new Thread("Server Shutdown Thread") {
             public void run() {
                dedicatedserver.func_71263_m(true);
+               LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
             }
          };
          thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(field_147145_h));
@@ -971,7 +983,7 @@
    }
 
    public ServerWorld func_71218_a(DimensionType p_71218_1_) {
-      return this.field_71305_c.get(p_71218_1_);
+      return net.minecraftforge.common.DimensionManager.getWorld(this, p_71218_1_, true, true);
    }
 
    public Iterable<ServerWorld> func_212370_w() {
@@ -1010,7 +1022,7 @@
    }
 
    public String getServerModName() {
-      return "vanilla";
+      return net.minecraftforge.fml.BrandingControl.getServerBranding();
    }
 
    public CrashReport func_71230_b(CrashReport p_71230_1_) {
@@ -1396,6 +1408,10 @@
    public FunctionManager func_193030_aL() {
       return this.field_200258_al;
    }
+   
+   public net.minecraftforge.common.loot.LootModifierManager getLootModifierManager() {
+	   return lootManager;
+   }
 
    public void func_193031_aM() {
       if (!this.func_213162_bc()) {
@@ -1567,6 +1583,32 @@
 
    public abstract boolean func_213199_b(GameProfile p_213199_1_);
 
+   public Map<DimensionType, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+   @Nullable
+   public long[] getTickTime(DimensionType dim) {
+      return perWorldTickTimes.get(dim);
+   }
+
+   @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+   public synchronized Map<DimensionType, ServerWorld> forgeGetWorldMap() {
+      return this.field_71305_c;
+   }
+   private int worldArrayMarker = 0;
+   private int worldArrayLast = -1;
+   private ServerWorld[] worldArray;
+   @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+   public synchronized void markWorldsDirty() {
+      worldArrayMarker++;
+   }
+   public ServerWorld[] getWorldArray() {
+      if (worldArrayMarker == worldArrayLast && worldArray != null)
+         return worldArray;
+      //ModcraftForge remove .stream()
+      worldArray = this.field_71305_c.values().toArray(new ServerWorld[0]);
+      worldArrayLast = worldArrayMarker;
+      return worldArray;
+   }
+
    public void func_223711_a(Path p_223711_1_) throws IOException {
       Path path = p_223711_1_.resolve("levels");
 
