--- a/net/minecraft/client/renderer/texture/Stitcher.java
+++ b/net/minecraft/client/renderer/texture/Stitcher.java
@@ -14,6 +14,8 @@
 
 @OnlyIn(Dist.CLIENT)
 public class Stitcher {
+   private static final org.apache.logging.log4j.Logger LOGGER = org.apache.logging.log4j.LogManager.getLogger();
+
    private static final Comparator<Stitcher.Holder> field_217797_a = Comparator.<Stitcher.Holder, Integer>comparing((p_217793_0_) -> {
       return -p_217793_0_.field_94201_d;
    }).thenComparing((p_217795_0_) -> {
@@ -54,6 +56,12 @@
 
       for(Stitcher.Holder stitcher$holder : list) {
          if (!this.func_94310_b(stitcher$holder)) {
+            LOGGER.info(new net.minecraftforge.fml.loading.AdvancedLogMessageAdapter(sb->{
+               sb.append("Unable to fit: ").append(stitcher$holder.field_229213_a_.func_229248_a_());
+               sb.append(" - size: ").append(stitcher$holder.field_229213_a_.func_229250_b_()).append("x").append(stitcher$holder.field_229213_a_.func_229252_c_());
+               sb.append(" - Maybe try a lower resolution resourcepack?\n");
+               list.forEach(h-> sb.append("\t").append(h).append("\n"));
+            }));
             throw new StitcherException(stitcher$holder.field_229213_a_, list.stream().map((p_229212_0_) -> {
                return p_229212_0_.field_229213_a_;
             }).collect(ImmutableList.toImmutableList()));
@@ -64,12 +72,12 @@
       this.field_94315_d = MathHelper.func_151236_b(this.field_94315_d);
    }
 
-   public void func_229209_a_(Stitcher.ISpriteLoader p_229209_1_) {
+   public void getStichSlots(Stitcher.ISpriteLoader spriteLoaderIn) {
       for(Stitcher.Slot stitcher$slot : this.field_94317_b) {
          stitcher$slot.func_217792_a((p_229210_2_) -> {
             Stitcher.Holder stitcher$holder = p_229210_2_.func_94183_a();
             TextureAtlasSprite.Info textureatlassprite$info = stitcher$holder.field_229213_a_;
-            p_229209_1_.load(textureatlassprite$info, this.field_94318_c, this.field_94315_d, p_229210_2_.func_94186_b(), p_229210_2_.func_94185_c());
+            spriteLoaderIn.load(textureatlassprite$info, this.field_94318_c, this.field_94315_d, p_229210_2_.func_94186_b(), p_229210_2_.func_94185_c());
          });
       }
 
@@ -103,7 +111,7 @@
          boolean flag4 = flag2 && j != l;
          boolean flag;
          if (flag3 ^ flag4) {
-            flag = flag3;
+            flag = !flag3 && flag1; // Forge: Fix stitcher not expanding entire height before growing width, and (potentially) growing larger then the max size.
          } else {
             flag = flag1 && i <= j;
          }
@@ -140,7 +148,7 @@
       }
 
       public String toString() {
-         return "Holder{width=" + this.field_94204_c + ", height=" + this.field_94201_d + '}';
+         return "Holder{width=" + this.field_94204_c + ", height=" + this.field_94201_d + ", name=" + this.field_229213_a_.func_229248_a_() + '}';
       }
    }
 
