--- a/net/minecraft/world/server/ChunkManager.java
+++ b/net/minecraft/world/server/ChunkManager.java
@@ -19,12 +19,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.Writer;
-import java.util.Collection;
-import java.util.List;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Queue;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
@@ -37,6 +32,8 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import it.unimi.dsi.fastutil.objects.ObjectRBTreeSet;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ReportedException;
@@ -121,6 +118,14 @@
    private final Queue<Runnable> field_223181_A = Queues.newConcurrentLinkedQueue();
    private int field_219247_A;
 
+   // Paper start
+   public final int getEffectiveViewDistance() {
+      // TODO this needs to be checked on update
+      // Mojang currently sets it to +1 of the configured view distance. So subtract one to get the one we really want.
+      return this.field_219247_A - 1;
+   }
+   // Paper end
+
    public ChunkManager(ServerWorld p_i232602_1_, SaveFormat.LevelSave p_i232602_2_, DataFixer p_i232602_3_, TemplateManager p_i232602_4_, Executor p_i232602_5_, ThreadTaskExecutor<Runnable> p_i232602_6_, IChunkLightProvider p_i232602_7_, ChunkGenerator p_i232602_8_, IChunkStatusListener p_i232602_9_, Supplier<DimensionSavedDataManager> p_i232602_10_, int p_i232602_11_, boolean p_i232602_12_) {
       super(new File(p_i232602_2_.func_237291_a_(p_i232602_1_.func_234923_W_()), "region"), p_i232602_3_, p_i232602_12_);
       this.field_219269_w = p_i232602_4_;
@@ -317,6 +322,68 @@
 
    }
 
+   // Paper start - incremental autosave
+   final ObjectRBTreeSet<ChunkHolder> autoSaveQueue = new ObjectRBTreeSet<>((playerchunk1, playerchunk2) -> {
+      int timeCompare =  Long.compare(playerchunk1.lastAutoSaveTime, playerchunk2.lastAutoSaveTime);
+      if (timeCompare != 0) {
+         return timeCompare;
+      }
+
+      return Long.compare(getCoordinateKey(playerchunk1.field_219319_n), getCoordinateKey(playerchunk2.field_219319_n));
+   });
+
+   public static long getCoordinateKey(final ChunkPos pair) {
+      return ((long)pair.field_77275_b << 32) | (pair.field_77276_a & 0xFFFFFFFFL);
+   }
+
+   protected void saveIncrementally() {
+      int savedThisTick = 0;
+      // optimized since we search far less chunks to hit ones that need to be saved
+      List<ChunkHolder> reschedule = new java.util.ArrayList<>(24 /*TODO:paper config*/);
+      long currentTick = this.field_219255_i.func_82737_E();
+      long maxSaveTime = currentTick - -1; //TODO:paper config
+
+      for (Iterator<ChunkHolder> iterator = this.autoSaveQueue.iterator(); iterator.hasNext();) {
+         ChunkHolder playerchunk = iterator.next();
+         if (playerchunk.lastAutoSaveTime > maxSaveTime) {
+            break;
+         }
+
+         iterator.remove();
+
+         IChunk ichunkaccess = playerchunk.func_219302_f().getNow(null);
+         if (ichunkaccess instanceof Chunk) {
+            boolean shouldSave = ((Chunk)ichunkaccess).field_76641_n <= maxSaveTime;
+
+            if (shouldSave && this.func_219229_a(ichunkaccess)) {
+               ++savedThisTick;
+
+               if (!playerchunk.setHasBeenLoaded()) {
+                  // do not fall through to reschedule logic
+                  playerchunk.inactiveTimeStart = currentTick;
+                  if (savedThisTick >= 24 /* TODO:paper config*/ ) {
+                     break;
+                  }
+                  continue;
+               }
+            }
+         }
+
+         reschedule.add(playerchunk);
+
+         if (savedThisTick >= 24 /* TODO:paper config*/) {
+            break;
+         }
+      }
+
+      for (int i = 0, len = reschedule.size(); i < len; ++i) {
+         ChunkHolder playerchunk = reschedule.get(i);
+         playerchunk.lastAutoSaveTime = this.field_219255_i.func_82737_E();
+         this.autoSaveQueue.add(playerchunk);
+      }
+   }
+   // Paper end
+
    protected void func_219177_a(boolean p_219177_1_) {
       if (p_219177_1_) {
          List<ChunkHolder> list = this.field_219252_f.values().stream().filter(ChunkHolder::func_219289_k).peek(ChunkHolder::func_219303_l).collect(Collectors.toList());
@@ -400,6 +467,7 @@
             if (this.field_219253_g.remove(p_219212_1_, p_219212_3_) && p_219185_5_ != null) {
                if (p_219185_5_ instanceof Chunk) {
                   ((Chunk)p_219185_5_).func_177417_c(false);
+                  net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Unload((Chunk)p_219185_5_));
                }
 
                this.func_219229_a(p_219185_5_);
@@ -601,6 +669,7 @@
                if (list != null) {
                   list.forEach(chunk::func_76622_b);
                }
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Load(chunk));
             }
 
             return chunk;
@@ -678,6 +747,7 @@
 
             this.field_219255_i.func_217381_Z().func_230035_c_("chunkSave");
             CompoundNBT compoundnbt = ChunkSerializer.func_222645_a(this.field_219255_i, p_219229_1_);
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkDataEvent.Save(p_219229_1_, p_219229_1_.getWorldForge() != null ? p_219229_1_.getWorldForge() : this.field_219255_i, compoundnbt));
             this.func_219100_a(chunkpos, compoundnbt);
             this.func_241088_a_(chunkpos, chunkstatus.func_202129_d());
             return true;
@@ -734,6 +804,7 @@
 
    protected void func_219199_a(ServerPlayerEntity p_219199_1_, ChunkPos p_219199_2_, IPacket<?>[] p_219199_3_, boolean p_219199_4_, boolean p_219199_5_) {
       if (p_219199_1_.field_70170_p == this.field_219255_i) {
+         net.minecraftforge.event.ForgeEventFactory.fireChunkWatch(p_219199_4_, p_219199_5_, p_219199_1_, p_219199_2_, this.field_219255_i);
          if (p_219199_5_ && !p_219199_4_) {
             ChunkHolder chunkholder = this.func_219219_b(p_219199_2_.func_201841_a());
             if (chunkholder != null) {
@@ -1192,13 +1263,11 @@
          return ChunkManager.this.field_219261_o.contains(p_219371_1_);
       }
 
-      @Nullable
-      protected ChunkHolder func_219335_b(long p_219335_1_) {
+         protected ChunkHolder func_219335_b(long p_219335_1_) {
          return ChunkManager.this.func_219220_a(p_219335_1_);
       }
 
-      @Nullable
-      protected ChunkHolder func_219372_a(long p_219372_1_, int p_219372_3_, @Nullable ChunkHolder p_219372_4_, int p_219372_5_) {
+         protected ChunkHolder func_219372_a(long p_219372_1_, int p_219372_3_, @Nullable ChunkHolder p_219372_4_, int p_219372_5_) {
          return ChunkManager.this.func_219213_a(p_219372_1_, p_219372_3_, p_219372_4_, p_219372_5_);
       }
    }
