--- a/net/minecraft/world/chunk/Chunk.java
+++ b/net/minecraft/world/chunk/Chunk.java
@@ -28,10 +28,12 @@
 import net.minecraft.entity.EntityType;
 import net.minecraft.entity.boss.dragon.EnderDragonEntity;
 import net.minecraft.entity.boss.dragon.EnderDragonPartEntity;
+import net.minecraft.entity.player.ServerPlayerEntity;
 import net.minecraft.fluid.Fluid;
 import net.minecraft.fluid.FluidState;
 import net.minecraft.fluid.Fluids;
 import net.minecraft.nbt.CompoundNBT;
+import net.minecraft.network.IPacket;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.ClassInheritanceMultiMap;
@@ -51,21 +53,20 @@
 import net.minecraft.world.gen.feature.structure.Structure;
 import net.minecraft.world.gen.feature.structure.StructureStart;
 import net.minecraft.world.lighting.WorldLightManager;
-import net.minecraft.world.server.ChunkHolder;
-import net.minecraft.world.server.ServerWorld;
+import net.minecraft.world.server.*;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class Chunk implements IChunk {
+public class Chunk extends net.minecraftforge.common.capabilities.CapabilityProvider<Chunk> implements IChunk, net.minecraftforge.common.extensions.IForgeChunk {
    private static final Logger field_150817_t = LogManager.getLogger();
    @Nullable
    public static final ChunkSection field_186036_a = null;
    private final ChunkSection[] field_76652_q = new ChunkSection[16];
    private BiomeContainer field_76651_r;
    private final Map<BlockPos, CompoundNBT> field_201618_i = Maps.newHashMap();
-   private boolean field_76636_d;
+   public boolean field_76636_d;
    private final World field_76637_e;
    private final Map<Heightmap.Type, Heightmap> field_76634_f = Maps.newEnumMap(Heightmap.Type.class);
    private final UpgradeData field_196967_n;
@@ -84,17 +85,216 @@
    private Supplier<ChunkHolder.LocationType> field_217329_u;
    @Nullable
    private Consumer<Chunk> field_217330_v;
-   private final ChunkPos field_212816_F;
+   private final ChunkPos field_212816_F; public final long coordinateKey; public final int locX; public final int locZ; // Paper - cache coordinate key
    private volatile boolean field_217331_x;
 
+   public final com.destroystokyo.paper.util.maplist.EntityList entities = new com.destroystokyo.paper.util.maplist.EntityList();
+   public ChunkHolder playerChunk;
+   // Paper start - Optimize getBlockData to reduce instructions
+   public BlockState func_180495_p(BlockPos p_180495_1_) {
+      return this.getBlockData(p_180495_1_.func_177958_n(), p_180495_1_.func_177956_o(), p_180495_1_.func_177952_p());
+   }
+   public final BlockState getBlockData(final int x, final int y, final int z) {
+      // Method body / logic copied from below
+      final int i = y >> 4;
+      if (y < 0 || i >= this.field_76652_q.length || this.field_76652_q[i] == null || this.field_76652_q[i].field_76682_b == 0) {
+         return Blocks.field_150350_a.func_176223_P();
+      }
+      // Inlined ChunkSection.getType() and DataPaletteBlock.a(int,int,int)
+      return this.field_76652_q[i].field_177488_d.func_186015_a((y & 15) << 8 | (z & 15) << 4 | x & 15);
+   }
+
+   public void internal_OnLoad() {
+      // Paper start - neighbour cache
+      int chunkX = this.field_212816_F.field_77276_a;
+      int chunkZ = this.field_212816_F.field_77275_b;
+      ServerChunkProvider chunkProvider = ((ServerWorld)this.field_76637_e).func_72863_F();
+      for (int dx = -NEIGHBOUR_CACHE_RADIUS; dx <= NEIGHBOUR_CACHE_RADIUS; ++dx) {
+         for (int dz = -NEIGHBOUR_CACHE_RADIUS; dz <= NEIGHBOUR_CACHE_RADIUS; ++dz) {
+            Chunk neighbour = chunkProvider.getChunkAtIfLoadedMainThreadNoCache(chunkX + dx, chunkZ + dz);
+            if (neighbour != null) {
+               neighbour.setNeighbourLoaded(-dx, -dz, this);
+               // should be in cached already
+               this.setNeighbourLoaded(dx, dz, neighbour);
+            }
+         }
+      }
+      this.setNeighbourLoaded(0, 0, this);
+      this.loadedTicketLevel = true;
+      // Paper end - neighbour cache
+
+      ((ServerWorld) this.field_76637_e).func_72863_F().addLoadedChunk(this);
+
+   }
+
+   public void internal_OnUnload() {
+
+      // Paper start - neighbour cache
+      int chunkX = this.field_212816_F.field_77276_a;
+      int chunkZ = this.field_212816_F.field_77275_b;
+      ServerChunkProvider chunkProvider = ((ServerWorld)this.field_76637_e).func_72863_F();
+      for (int dx = -NEIGHBOUR_CACHE_RADIUS; dx <= NEIGHBOUR_CACHE_RADIUS; ++dx) {
+         for (int dz = -NEIGHBOUR_CACHE_RADIUS; dz <= NEIGHBOUR_CACHE_RADIUS; ++dz) {
+            Chunk neighbour = chunkProvider.getChunkAtIfLoadedMainThreadNoCache(chunkX + dx, chunkZ + dz);
+            if (neighbour != null) {
+               neighbour.setNeighbourUnloaded(-dx, -dz);
+            }
+         }
+      }
+      this.loadedTicketLevel = false;
+      this.resetNeighbours();
+      // Paper end
+      ((ServerWorld) this.field_76637_e).func_72863_F().removeLoadedChunk(this);
+
+   }
+
+   private long neighbourChunksLoadedBitset;
+   boolean loadedTicketLevel;
+   private final Chunk[] loadedNeighbourChunks = new Chunk[(NEIGHBOUR_CACHE_RADIUS * 2 + 1) * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)];
+   public final boolean areNeighboursLoaded(final int radius) {
+      return Chunk.areNeighboursLoaded(this.neighbourChunksLoadedBitset, radius);
+   }
+
+   public final Chunk getRelativeNeighbourIfLoaded(final int relativeX, final int relativeZ) {
+      return this.loadedNeighbourChunks[getNeighbourIndex(relativeX, relativeZ)];
+   }
+
+   public final boolean isNeighbourLoaded(final int relativeX, final int relativeZ) {
+      return (this.neighbourChunksLoadedBitset & (1L << getNeighbourIndex(relativeX, relativeZ))) != 0;
+   }
+
+   public final void setNeighbourLoaded(final int relativeX, final int relativeZ, final Chunk chunk) {
+      if (chunk == null) {
+         throw new IllegalArgumentException("Chunk must be non-null, neighbour: (" + relativeX + "," + relativeZ + "), chunk: " + this.field_212816_F);
+      }
+      final long before = this.neighbourChunksLoadedBitset;
+      final int index = getNeighbourIndex(relativeX, relativeZ);
+      this.loadedNeighbourChunks[index] = chunk;
+      this.neighbourChunksLoadedBitset |= (1L << index);
+      this.onNeighbourChange(before, this.neighbourChunksLoadedBitset);
+   }
+
+   public final void setNeighbourUnloaded(final int relativeX, final int relativeZ) {
+      final long before = this.neighbourChunksLoadedBitset;
+      final int index = getNeighbourIndex(relativeX, relativeZ);
+      this.loadedNeighbourChunks[index] = null;
+      this.neighbourChunksLoadedBitset &= ~(1L << index);
+      this.onNeighbourChange(before, this.neighbourChunksLoadedBitset);
+   }
+
+   public final void resetNeighbours() {
+      final long before = this.neighbourChunksLoadedBitset;
+      this.neighbourChunksLoadedBitset = 0L;
+      java.util.Arrays.fill(this.loadedNeighbourChunks, null);
+      this.onNeighbourChange(before, 0L);
+   }
+
+   protected void onNeighbourChange(final long bitsetBefore, final long bitsetAfter) {
+      // Paper start - no-tick view distance
+      ServerChunkProvider chunkProviderServer = ((ServerWorld)this.field_76637_e).func_72863_F();
+      ChunkManager chunkMap = chunkProviderServer.field_217237_a;
+      // this code handles the addition of ticking tickets - the distance map handles the removal
+      if (!areNeighboursLoaded(bitsetBefore, 2) && areNeighboursLoaded(bitsetAfter, 2)) {
+         if (chunkMap.playerViewDistanceTickMap.getObjectsInRange(this.coordinateKey) != null) {
+            // now we're ready for entity ticking
+            chunkProviderServer.field_217243_i.execute(() -> {
+               // double check that this condition still holds.
+               if (Chunk.this.areNeighboursLoaded(2) && chunkMap.playerViewDistanceTickMap.getObjectsInRange(Chunk.this.coordinateKey) != null) {
+                  chunkProviderServer.registerTickingTicket(TicketType.field_219490_c, Chunk.this.field_212816_F, 31, Chunk.this.field_212816_F); // 31 -> entity ticking, TODO check on update
+               }
+            });
+         }
+      }
+
+      // this code handles the chunk sending
+      if (!areNeighboursLoaded(bitsetBefore, 1) && areNeighboursLoaded(bitsetAfter, 1)) {
+         if (chunkMap.playerViewDistanceBroadcastMap.getObjectsInRange(this.coordinateKey) != null) {
+            // now we're ready to send
+            chunkMap.field_219265_s.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219081_a(chunkMap.func_219220_a(this.coordinateKey), (() -> { // Copied frm PlayerChunkMap
+               // double check that this condition still holds.
+               if (!Chunk.this.areNeighboursLoaded(1)) {
+                  return;
+               }
+               com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayerEntity> inRange = chunkMap.playerViewDistanceBroadcastMap.getObjectsInRange(Chunk.this.coordinateKey);
+               if (inRange == null) {
+                  return;
+               }
+
+               // broadcast
+               Object[] backingSet = inRange.getBackingSet();
+               IPacket[] chunkPackets = new IPacket[10];
+               for (int index = 0, len = backingSet.length; index < len; ++index) {
+                  Object temp = backingSet[index];
+                  if (!(temp instanceof ServerPlayerEntity)) {
+                     continue;
+                  }
+                  ServerPlayerEntity player = (ServerPlayerEntity)temp;
+                  chunkMap.func_219180_a(player, chunkPackets, Chunk.this);
+               }
+            })));
+         }
+      }
+      // Paper end - no-tick view distance
+   }
+
+   static final int NEIGHBOUR_CACHE_RADIUS = 3;
+   private static int getNeighbourIndex(final int relativeX, final int relativeZ) {
+      // index = (relativeX + NEIGHBOUR_CACHE_RADIUS) + (relativeZ + NEIGHBOUR_CACHE_RADIUS) * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)
+      // optimised variant of the above by moving some of the ops to compile time
+      return relativeX + (relativeZ * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)) + (NEIGHBOUR_CACHE_RADIUS + NEIGHBOUR_CACHE_RADIUS * ((NEIGHBOUR_CACHE_RADIUS * 2 + 1)));
+   }
+
+   public static boolean areNeighboursLoaded(final long bitset, final int radius) {
+      // index = relativeX + (relativeZ * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)) + (NEIGHBOUR_CACHE_RADIUS + NEIGHBOUR_CACHE_RADIUS * ((NEIGHBOUR_CACHE_RADIUS * 2 + 1)))
+      switch (radius) {
+         case 0: {
+            return (bitset & (1L << getNeighbourIndex(0, 0))) != 0;
+         }
+         case 1: {
+            long mask = 0L;
+            for (int dx = -1; dx <= 1; ++dx) {
+               for (int dz = -1; dz <= 1; ++dz) {
+                  mask |= (1L << getNeighbourIndex(dx, dz));
+               }
+            }
+            return (bitset & mask) == mask;
+         }
+         case 2: {
+            long mask = 0L;
+            for (int dx = -2; dx <= 2; ++dx) {
+               for (int dz = -2; dz <= 2; ++dz) {
+                  mask |= (1L << getNeighbourIndex(dx, dz));
+               }
+            }
+            return (bitset & mask) == mask;
+         }
+         case 3: {
+            long mask = 0L;
+            for (int dx = -3; dx <= 3; ++dx) {
+               for (int dz = -3; dz <= 3; ++dz) {
+                  mask |= (1L << getNeighbourIndex(dx, dz));
+               }
+            }
+            return (bitset & mask) == mask;
+         }
+
+         default:
+            throw new IllegalArgumentException("Radius not recognized: " + radius);
+      }
+   }
+   // Paper end
+
+
    public Chunk(World p_i225780_1_, ChunkPos p_i225780_2_, BiomeContainer p_i225780_3_) {
       this(p_i225780_1_, p_i225780_2_, p_i225780_3_, UpgradeData.field_196994_a, EmptyTickList.func_205388_a(), EmptyTickList.func_205388_a(), 0L, (ChunkSection[])null, (Consumer<Chunk>)null);
    }
 
    public Chunk(World p_i225781_1_, ChunkPos p_i225781_2_, BiomeContainer p_i225781_3_, UpgradeData p_i225781_4_, ITickList<Block> p_i225781_5_, ITickList<Fluid> p_i225781_6_, long p_i225781_7_, @Nullable ChunkSection[] p_i225781_9_, @Nullable Consumer<Chunk> p_i225781_10_) {
+      super(Chunk.class);
       this.field_76645_j = new ClassInheritanceMultiMap[16];
       this.field_76637_e = p_i225781_1_;
-      this.field_212816_F = p_i225781_2_;
+      this.locX = p_i225781_2_.field_77276_a; this.locZ = p_i225781_2_.field_77275_b; // Paper - reduce need for field look ups
+      this.field_212816_F = p_i225781_2_; this.coordinateKey = ChunkPos.func_77272_a(locX, locZ); // Paper - cache long key
       this.field_196967_n = p_i225781_4_;
 
       for(Heightmap.Type heightmap$type : Heightmap.Type.values()) {
@@ -119,7 +319,7 @@
             field_150817_t.warn("Could not set level chunk sections, array length is {} instead of {}", p_i225781_9_.length, this.field_76652_q.length);
          }
       }
-
+      this.gatherCapabilities();
    }
 
    public Chunk(World p_i49947_1_, ChunkPrimer p_i49947_2_) {
@@ -171,10 +371,10 @@
       return this.field_76652_q;
    }
 
-   public BlockState func_180495_p(BlockPos p_180495_1_) {
-      int i = p_180495_1_.func_177958_n();
-      int j = p_180495_1_.func_177956_o();
-      int k = p_180495_1_.func_177952_p();
+   public BlockState getBlockState_old(BlockPos pos) {
+      int i = pos.func_177958_n();
+      int j = pos.func_177956_o();
+      int k = pos.func_177952_p();
       if (this.field_76637_e.func_234925_Z_()) {
          BlockState blockstate = null;
          if (j == 60) {
@@ -264,28 +464,28 @@
 
          if (!this.field_76637_e.field_72995_K) {
             blockstate.func_196947_b(this.field_76637_e, p_177436_1_, p_177436_2_, p_177436_3_);
-         } else if (block1 != block && block1 instanceof ITileEntityProvider) {
+         } else if ((block1 != block || !p_177436_2_.hasTileEntity()) && blockstate.hasTileEntity()) {
             this.field_76637_e.func_175713_t(p_177436_1_);
          }
 
          if (!chunksection.func_177485_a(i, j & 15, k).func_203425_a(block)) {
             return null;
          } else {
-            if (block1 instanceof ITileEntityProvider) {
+            if (blockstate.hasTileEntity()) {
                TileEntity tileentity = this.func_177424_a(p_177436_1_, Chunk.CreateEntityType.CHECK);
                if (tileentity != null) {
                   tileentity.func_145836_u();
                }
             }
 
-            if (!this.field_76637_e.field_72995_K) {
+            if (!this.field_76637_e.field_72995_K && !this.field_76637_e.captureBlockSnapshots) {
                p_177436_2_.func_215705_a(this.field_76637_e, p_177436_1_, blockstate, p_177436_3_);
             }
 
-            if (block instanceof ITileEntityProvider) {
+            if (p_177436_2_.hasTileEntity()) {
                TileEntity tileentity1 = this.func_177424_a(p_177436_1_, Chunk.CreateEntityType.CHECK);
                if (tileentity1 == null) {
-                  tileentity1 = ((ITileEntityProvider)block).func_196283_a_(this.field_76637_e);
+                  tileentity1 = p_177436_2_.createTileEntity(this.field_76637_e);
                   this.field_76637_e.func_175690_a(p_177436_1_, tileentity1);
                } else {
                   tileentity1.func_145836_u();
@@ -310,6 +510,7 @@
       if (i != this.field_212816_F.field_77276_a || j != this.field_212816_F.field_77275_b) {
          field_150817_t.warn("Wrong location! ({}, {}) should be ({}, {}), {}", i, j, this.field_212816_F.field_77276_a, this.field_212816_F.field_77275_b, p_76612_1_);
          p_76612_1_.field_70128_L = true;
+         return; //Paper
       }
 
       int k = MathHelper.func_76128_c(p_76612_1_.func_226278_cu_() / 16.0D);
@@ -321,11 +522,15 @@
          k = this.field_76645_j.length - 1;
       }
 
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityEvent.EnteringChunk(p_76612_1_, this.field_212816_F.field_77276_a, this.field_212816_F.field_77275_b, p_76612_1_.field_70176_ah, p_76612_1_.field_70164_aj));
       p_76612_1_.field_70175_ag = true;
+      p_76612_1_.setCurrentChunk(this); //Paper - modcraftforge
+      this.entities.add(p_76612_1_);
       p_76612_1_.field_70176_ah = this.field_212816_F.field_77276_a;
       p_76612_1_.field_70162_ai = k;
       p_76612_1_.field_70164_aj = this.field_212816_F.field_77275_b;
       this.field_76645_j[k].add(p_76612_1_);
+      this.func_76630_e(); // Forge - ensure chunks are marked to save after an entity add
    }
 
    public void func_201607_a(Heightmap.Type p_201607_1_, long[] p_201607_2_) {
@@ -345,9 +550,13 @@
          p_76608_2_ = this.field_76645_j.length - 1;
       }
 
+      if (p_76608_1_.currentChunk != null && p_76608_1_.currentChunk.get() == this) p_76608_1_.setCurrentChunk(null); //paper - modcraftforge
       this.field_76645_j[p_76608_2_].remove(p_76608_1_);
+      this.func_76630_e(); // Forge - ensure chunks are marked to save after entity removals
+      this.entities.remove(p_76608_1_);
    }
 
+   public final int getHighestBlockY(Heightmap.Type heightmap_type, int i, int j) { return this.func_201576_a(heightmap_type, i, j) + 1; } // Paper - sort of an obfhelper, but without -1
    public int func_201576_a(Heightmap.Type p_201576_1_, int p_201576_2_, int p_201576_3_) {
       return this.field_76634_f.get(p_201576_1_).func_202273_a(p_201576_2_ & 15, p_201576_3_ & 15) - 1;
    }
@@ -356,7 +565,7 @@
    private TileEntity func_177422_i(BlockPos p_177422_1_) {
       BlockState blockstate = this.func_180495_p(p_177422_1_);
       Block block = blockstate.func_177230_c();
-      return !block.func_235695_q_() ? null : ((ITileEntityProvider)block).func_196283_a_(this.field_76637_e);
+      return !blockstate.hasTileEntity() ? null : blockstate.createTileEntity(this.field_76637_e);
    }
 
    @Nullable
@@ -367,6 +576,10 @@
    @Nullable
    public TileEntity func_177424_a(BlockPos p_177424_1_, Chunk.CreateEntityType p_177424_2_) {
       TileEntity tileentity = this.field_150816_i.get(p_177424_1_);
+      if (tileentity != null && tileentity.func_145837_r()) {
+         field_150816_i.remove(p_177424_1_);
+         tileentity = null;
+      }
       if (tileentity == null) {
          CompoundNBT compoundnbt = this.field_201618_i.remove(p_177424_1_);
          if (compoundnbt != null) {
@@ -382,9 +595,6 @@
             tileentity = this.func_177422_i(p_177424_1_);
             this.field_76637_e.func_175690_a(p_177424_1_, tileentity);
          }
-      } else if (tileentity.func_145837_r()) {
-         this.field_150816_i.remove(p_177424_1_);
-         return null;
       }
 
       return tileentity;
@@ -399,7 +609,7 @@
    }
 
    public void func_177426_a(BlockPos p_177426_1_, TileEntity p_177426_2_) {
-      if (this.func_180495_p(p_177426_1_).func_177230_c() instanceof ITileEntityProvider) {
+      if (this.func_180495_p(p_177426_1_).hasTileEntity()) {
          p_177426_2_.func_226984_a_(this.field_76637_e, p_177426_1_);
          p_177426_2_.func_145829_t();
          TileEntity tileentity = this.field_150816_i.put(p_177426_1_.func_185334_h(), p_177426_2_);
@@ -418,9 +628,14 @@
    public CompoundNBT func_223134_j(BlockPos p_223134_1_) {
       TileEntity tileentity = this.func_175625_s(p_223134_1_);
       if (tileentity != null && !tileentity.func_145837_r()) {
+         try {
          CompoundNBT compoundnbt1 = tileentity.func_189515_b(new CompoundNBT());
          compoundnbt1.func_74757_a("keepPacked", false);
          return compoundnbt1;
+         } catch (Exception e) {
+            LogManager.getLogger().error("A TileEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", tileentity.getClass().getName(), e);
+            return null;
+         }
       } else {
          CompoundNBT compoundnbt = this.field_201618_i.get(p_223134_1_);
          if (compoundnbt != null) {
@@ -455,8 +670,8 @@
    }
 
    public void func_177414_a(@Nullable Entity p_177414_1_, AxisAlignedBB p_177414_2_, List<Entity> p_177414_3_, @Nullable Predicate<? super Entity> p_177414_4_) {
-      int i = MathHelper.func_76128_c((p_177414_2_.field_72338_b - 2.0D) / 16.0D);
-      int j = MathHelper.func_76128_c((p_177414_2_.field_72337_e + 2.0D) / 16.0D);
+      int i = MathHelper.func_76128_c((p_177414_2_.field_72338_b - this.field_76637_e.getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.func_76128_c((p_177414_2_.field_72337_e + this.field_76637_e.getMaxEntityRadius()) / 16.0D);
       i = MathHelper.func_76125_a(i, 0, this.field_76645_j.length - 1);
       j = MathHelper.func_76125_a(j, 0, this.field_76645_j.length - 1);
 
@@ -472,8 +687,8 @@
                   p_177414_3_.add(entity);
                }
 
-               if (entity instanceof EnderDragonEntity) {
-                  for(EnderDragonPartEntity enderdragonpartentity : ((EnderDragonEntity)entity).func_213404_dT()) {
+               if (entity.isMultipartEntity()) {
+                  for(net.minecraftforge.entity.PartEntity<?> enderdragonpartentity : entity.getParts()) {
                      if (enderdragonpartentity != p_177414_1_ && enderdragonpartentity.func_174813_aQ().func_72326_a(p_177414_2_) && (p_177414_4_ == null || p_177414_4_.test(enderdragonpartentity))) {
                         p_177414_3_.add(enderdragonpartentity);
                      }
@@ -486,8 +701,8 @@
    }
 
    public <T extends Entity> void func_217313_a(@Nullable EntityType<?> p_217313_1_, AxisAlignedBB p_217313_2_, List<? super T> p_217313_3_, Predicate<? super T> p_217313_4_) {
-      int i = MathHelper.func_76128_c((p_217313_2_.field_72338_b - 2.0D) / 16.0D);
-      int j = MathHelper.func_76128_c((p_217313_2_.field_72337_e + 2.0D) / 16.0D);
+      int i = MathHelper.func_76128_c((p_217313_2_.field_72338_b - this.field_76637_e.getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.func_76128_c((p_217313_2_.field_72337_e + this.field_76637_e.getMaxEntityRadius()) / 16.0D);
       i = MathHelper.func_76125_a(i, 0, this.field_76645_j.length - 1);
       j = MathHelper.func_76125_a(j, 0, this.field_76645_j.length - 1);
 
@@ -502,8 +717,8 @@
    }
 
    public <T extends Entity> void func_177430_a(Class<? extends T> p_177430_1_, AxisAlignedBB p_177430_2_, List<T> p_177430_3_, @Nullable Predicate<? super T> p_177430_4_) {
-      int i = MathHelper.func_76128_c((p_177430_2_.field_72338_b - 2.0D) / 16.0D);
-      int j = MathHelper.func_76128_c((p_177430_2_.field_72337_e + 2.0D) / 16.0D);
+      int i = MathHelper.func_76128_c((p_177430_2_.field_72338_b - this.field_76637_e.getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.func_76128_c((p_177430_2_.field_72337_e + this.field_76637_e.getMaxEntityRadius()) / 16.0D);
       i = MathHelper.func_76125_a(i, 0, this.field_76645_j.length - 1);
       j = MathHelper.func_76125_a(j, 0, this.field_76645_j.length - 1);
 
@@ -535,6 +750,11 @@
       };
       Sets.newHashSet(this.field_150816_i.keySet()).stream().filter(predicate).forEach(this.field_76637_e::func_175713_t);
 
+      for (TileEntity tileEntity : field_150816_i.values()) {
+         tileEntity.func_145836_u();
+         tileEntity.func_195044_w();
+      }
+
       for(int i = 0; i < this.field_76652_q.length; ++i) {
          ChunkSection chunksection = this.field_76652_q[i];
          if ((p_227073_4_ & 1 << i) == 0) {
@@ -598,7 +818,7 @@
 
    public Stream<BlockPos> func_217304_m() {
       return StreamSupport.stream(BlockPos.func_191531_b(this.field_212816_F.func_180334_c(), 0, this.field_212816_F.func_180333_d(), this.field_212816_F.func_180332_e(), 255, this.field_212816_F.func_180330_f()).spliterator(), false).filter((p_217312_1_) -> {
-         return this.func_180495_p(p_217312_1_).func_185906_d() != 0;
+         return this.func_180495_p(p_217312_1_).getLightValue(func_177412_p(), p_217312_1_) != 0;
       });
    }
 
@@ -704,9 +924,8 @@
       BlockState blockstate = this.func_180495_p(p_212815_1_);
       TileEntity tileentity;
       if ("DUMMY".equals(p_212815_2_.func_74779_i("id"))) {
-         Block block = blockstate.func_177230_c();
-         if (block instanceof ITileEntityProvider) {
-            tileentity = ((ITileEntityProvider)block).func_196283_a_(this.field_76637_e);
+         if (blockstate.hasTileEntity()) {
+            tileentity = blockstate.createTileEntity(this.field_76637_e);
          } else {
             tileentity = null;
             field_150817_t.warn("Tried to load a DUMMY block entity @ {} but found not block entity block {} at location", p_212815_1_, blockstate);
@@ -795,4 +1014,30 @@
       QUEUED,
       CHECK;
    }
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link AnvilChunkLoader}.
+    */
+   @java.lang.Deprecated
+   @javax.annotation.Nullable
+   public final CompoundNBT writeCapsToNBT() {
+      return this.serializeCaps();
+   }
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link AnvilChunkLoader}.
+    */
+   @java.lang.Deprecated
+   public final void readCapsFromNBT(CompoundNBT tag) {
+      this.deserializeCaps(tag);
+   }
+
+   @Override
+   public World getWorldForge() {
+      return func_177412_p();
+   }
 }
