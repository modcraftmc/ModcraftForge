--- a/net/minecraft/world/chunk/Chunk.java
+++ b/net/minecraft/world/chunk/Chunk.java
@@ -2,14 +2,13 @@
 
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import fr.modcraftmc.forge.ModcraftForge;
+import fr.modcraftmc.forge.spigot.UnsafeList;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.shorts.ShortList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+
+import java.util.*;
 import java.util.Map.Entry;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
@@ -20,7 +19,6 @@
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
-import net.minecraft.block.ITileEntityProvider;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ReportedException;
@@ -28,13 +26,15 @@
 import net.minecraft.entity.EntityType;
 import net.minecraft.entity.boss.dragon.EnderDragonEntity;
 import net.minecraft.entity.boss.dragon.EnderDragonPartEntity;
+import net.minecraft.entity.item.ItemEntity;
 import net.minecraft.fluid.Fluid;
 import net.minecraft.fluid.Fluids;
 import net.minecraft.fluid.IFluidState;
+import net.minecraft.inventory.IInventory;
 import net.minecraft.nbt.CompoundNBT;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.tileentity.TileEntity;
-import net.minecraft.util.ClassInheritanceMultiMap;
+import net.minecraft.util.EntityPredicates;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
@@ -58,18 +58,18 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class Chunk implements IChunk {
+public class Chunk extends net.minecraftforge.common.capabilities.CapabilityProvider<Chunk> implements IChunk, net.minecraftforge.common.extensions.IForgeChunk {
    private static final Logger field_150817_t = LogManager.getLogger();
    public static final ChunkSection field_186036_a = null;
    private final ChunkSection[] field_76652_q = new ChunkSection[16];
    private BiomeContainer field_76651_r;
    private final Map<BlockPos, CompoundNBT> field_201618_i = Maps.newHashMap();
-   private boolean field_76636_d;
+   public boolean field_76636_d;
    private final World field_76637_e;
    private final Map<Heightmap.Type, Heightmap> field_76634_f = Maps.newEnumMap(Heightmap.Type.class);
    private final UpgradeData field_196967_n;
    private final Map<BlockPos, TileEntity> field_150816_i = Maps.newHashMap();
-   private final ClassInheritanceMultiMap<Entity>[] field_76645_j;
+   //private final ClassInheritanceMultiMap<Entity>[] entityLists;
    private final Map<String, StructureStart> field_201619_q = Maps.newHashMap();
    private final Map<String, LongSet> field_201620_r = Maps.newHashMap();
    private final ShortList[] field_201622_t = new ShortList[16];
@@ -86,26 +86,41 @@
    private final ChunkPos field_212816_F;
    private volatile boolean field_217331_x;
 
+   //ModcraftForge
+   public final List<Entity>[] entitySlices; // Spigot
+
+
    public Chunk(World p_i225780_1_, ChunkPos p_i225780_2_, BiomeContainer p_i225780_3_) {
       this(p_i225780_1_, p_i225780_2_, p_i225780_3_, UpgradeData.field_196994_a, EmptyTickList.func_205388_a(), EmptyTickList.func_205388_a(), 0L, (ChunkSection[])null, (Consumer<Chunk>)null);
    }
 
    public Chunk(World p_i225781_1_, ChunkPos p_i225781_2_, BiomeContainer p_i225781_3_, UpgradeData p_i225781_4_, ITickList<Block> p_i225781_5_, ITickList<Fluid> p_i225781_6_, long p_i225781_7_, @Nullable ChunkSection[] p_i225781_9_, @Nullable Consumer<Chunk> p_i225781_10_) {
-      this.field_76645_j = new ClassInheritanceMultiMap[16];
+      super(Chunk.class);
+      //this.entityLists = new ClassInheritanceMultiMap[16];
       this.field_76637_e = p_i225781_1_;
       this.field_212816_F = p_i225781_2_;
       this.field_196967_n = p_i225781_4_;
 
+      //ModcraftForge
+      this.entitySlices = (List[]) (new List[16]);
+
       for(Heightmap.Type heightmap$type : Heightmap.Type.values()) {
          if (ChunkStatus.field_222617_m.func_222595_h().contains(heightmap$type)) {
             this.field_76634_f.put(heightmap$type, new Heightmap(this, heightmap$type));
          }
       }
 
-      for(int i = 0; i < this.field_76645_j.length; ++i) {
-         this.field_76645_j[i] = new ClassInheritanceMultiMap<>(Entity.class);
+      for (int l = 0; l < this.entitySlices.length; ++l) {
+         this.entitySlices[l] = new UnsafeList(); // Spigot
       }
 
+      /*
+      for(int i = 0; i < this.entityLists.length; ++i) {
+         this.entityLists[i] = new ClassInheritanceMultiMap<>(Entity.class);
+      }
+
+       */
+
       this.field_76651_r = p_i225781_3_;
       this.field_201621_s = p_i225781_5_;
       this.field_205325_u = p_i225781_6_;
@@ -118,7 +133,7 @@
             field_150817_t.warn("Could not set level chunk sections, array length is {} instead of {}", p_i225781_9_.length, this.field_76652_q.length);
          }
       }
-
+      this.gatherCapabilities();
    }
 
    public Chunk(World p_i49947_1_, ChunkPrimer p_i49947_2_) {
@@ -263,14 +278,14 @@
 
          if (!this.field_76637_e.field_72995_K) {
             blockstate.func_196947_b(this.field_76637_e, p_177436_1_, p_177436_2_, p_177436_3_);
-         } else if (block1 != block && block1 instanceof ITileEntityProvider) {
+         } else if ((block1 != block || !p_177436_2_.hasTileEntity()) && blockstate.hasTileEntity()) {
             this.field_76637_e.func_175713_t(p_177436_1_);
          }
 
          if (chunksection.func_177485_a(i, j & 15, k).func_177230_c() != block) {
             return null;
          } else {
-            if (block1 instanceof ITileEntityProvider) {
+            if (blockstate.hasTileEntity()) {
                TileEntity tileentity = this.func_177424_a(p_177436_1_, Chunk.CreateEntityType.CHECK);
                if (tileentity != null) {
                   tileentity.func_145836_u();
@@ -281,10 +296,10 @@
                p_177436_2_.func_215705_a(this.field_76637_e, p_177436_1_, blockstate, p_177436_3_);
             }
 
-            if (block instanceof ITileEntityProvider) {
+            if (p_177436_2_.hasTileEntity()) {
                TileEntity tileentity1 = this.func_177424_a(p_177436_1_, Chunk.CreateEntityType.CHECK);
                if (tileentity1 == null) {
-                  tileentity1 = ((ITileEntityProvider)block).func_196283_a_(this.field_76637_e);
+                  tileentity1 = p_177436_2_.createTileEntity(this.field_76637_e);
                   this.field_76637_e.func_175690_a(p_177436_1_, tileentity1);
                } else {
                   tileentity1.func_145836_u();
@@ -316,15 +331,49 @@
          k = 0;
       }
 
-      if (k >= this.field_76645_j.length) {
-         k = this.field_76645_j.length - 1;
+      if (k >= this.entitySlices.length) {
+         k = this.entitySlices.length - 1;
       }
 
+      // Paper - remove from any old list if its in one
+      List<Entity> nextSlice = this.entitySlices[k]; // the next list to be added to
+      List<Entity> currentSlice = p_76612_1_.entitySlice;
+      if (nextSlice == currentSlice) {
+         ModcraftForge.LOGGER.warn("Entity was already in this chunk!" + p_76612_1_, new Throwable());
+         return; // ??? silly plugins
+      }
+      if (currentSlice != null && currentSlice.contains(p_76612_1_)) {
+         // Still in an old chunk...
+         ModcraftForge.LOGGER.warn("Entity is still in another chunk!" + p_76612_1_, new Throwable());
+         Chunk chunk = p_76612_1_.getCurrentChunk();
+         if (chunk != null) {
+            chunk.func_76622_b(p_76612_1_);
+         } else {
+            func_76622_b(p_76612_1_);
+         }
+         currentSlice.remove(p_76612_1_); // Just incase the above did not remove from the previous slice
+      }
+      // Paper end
+
+      /*
+      if (k >= this.entityLists.length) {
+         k = this.entityLists.length - 1;
+      }
+
+       */
+
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityEvent.EnteringChunk(p_76612_1_, this.field_212816_F.field_77276_a, this.field_212816_F.field_77275_b, p_76612_1_.field_70176_ah, p_76612_1_.field_70164_aj));
       p_76612_1_.field_70175_ag = true;
+      p_76612_1_.setCurrentChunk(this); // Paper
       p_76612_1_.field_70176_ah = this.field_212816_F.field_77276_a;
       p_76612_1_.field_70162_ai = k;
       p_76612_1_.field_70164_aj = this.field_212816_F.field_77275_b;
-      this.field_76645_j[k].add(p_76612_1_);
+      //this.entityLists[k].add(entityIn);
+      this.entitySlices[k].add(p_76612_1_);
+
+      p_76612_1_.entitySlice = this.entitySlices[k]; // Paper
+
+      this.func_76630_e(); // Forge - ensure chunks are marked to save after an entity add
    }
 
    public void func_201607_a(Heightmap.Type p_201607_1_, long[] p_201607_2_) {
@@ -340,11 +389,35 @@
          p_76608_2_ = 0;
       }
 
-      if (p_76608_2_ >= this.field_76645_j.length) {
-         p_76608_2_ = this.field_76645_j.length - 1;
+      /*
+      if (index >= this.entityLists.length) {
+         index = this.entityLists.length - 1;
       }
+       */
+      if (p_76608_2_ >= this.entitySlices.length) {
+         p_76608_2_ = this.entitySlices.length - 1;
+      }
 
-      this.field_76645_j[p_76608_2_].remove(p_76608_1_);
+      // Paper start
+      if (p_76608_1_.currentChunk != null && p_76608_1_.currentChunk.get() == this) p_76608_1_.setCurrentChunk(null);
+      if (entitySlices[p_76608_2_] == p_76608_1_.entitySlice) {
+         p_76608_1_.entitySlice = null;
+      }
+      if (!this.entitySlices[p_76608_2_].remove(p_76608_1_)) {
+         return;
+      }
+      /*
+
+      if (entityIn instanceof EntityItem) {
+         itemCounts[i]--;
+      } else if (entity instanceof IInventory) {
+         inventoryEntityCounts[i]--;
+      }
+           */
+      // Paper end
+
+      //this.entityLists[index].remove(entityIn);
+      this.func_76630_e(); // Forge - ensure chunks are marked to save after entity removals
    }
 
    public int func_201576_a(Heightmap.Type p_201576_1_, int p_201576_2_, int p_201576_3_) {
@@ -355,7 +428,7 @@
    private TileEntity func_177422_i(BlockPos p_177422_1_) {
       BlockState blockstate = this.func_180495_p(p_177422_1_);
       Block block = blockstate.func_177230_c();
-      return !block.func_149716_u() ? null : ((ITileEntityProvider)block).func_196283_a_(this.field_76637_e);
+      return !blockstate.hasTileEntity() ? null : blockstate.createTileEntity(this.field_76637_e);
    }
 
    @Nullable
@@ -366,6 +439,10 @@
    @Nullable
    public TileEntity func_177424_a(BlockPos p_177424_1_, Chunk.CreateEntityType p_177424_2_) {
       TileEntity tileentity = this.field_150816_i.get(p_177424_1_);
+      if (tileentity != null && tileentity.func_145837_r()) {
+         field_150816_i.remove(p_177424_1_);
+         tileentity = null;
+      }
       if (tileentity == null) {
          CompoundNBT compoundnbt = this.field_201618_i.remove(p_177424_1_);
          if (compoundnbt != null) {
@@ -381,9 +458,6 @@
             tileentity = this.func_177422_i(p_177424_1_);
             this.field_76637_e.func_175690_a(p_177424_1_, tileentity);
          }
-      } else if (tileentity.func_145837_r()) {
-         this.field_150816_i.remove(p_177424_1_);
-         return null;
       }
 
       return tileentity;
@@ -398,7 +472,7 @@
    }
 
    public void func_177426_a(BlockPos p_177426_1_, TileEntity p_177426_2_) {
-      if (this.func_180495_p(p_177426_1_).func_177230_c() instanceof ITileEntityProvider) {
+      if (this.func_180495_p(p_177426_1_).hasTileEntity()) {
          p_177426_2_.func_226984_a_(this.field_76637_e, p_177426_1_);
          p_177426_2_.func_145829_t();
          TileEntity tileentity = this.field_150816_i.put(p_177426_1_.func_185334_h(), p_177426_2_);
@@ -417,9 +491,14 @@
    public CompoundNBT func_223134_j(BlockPos p_223134_1_) {
       TileEntity tileentity = this.func_175625_s(p_223134_1_);
       if (tileentity != null && !tileentity.func_145837_r()) {
+         try {
          CompoundNBT compoundnbt1 = tileentity.func_189515_b(new CompoundNBT());
          compoundnbt1.func_74757_a("keepPacked", false);
          return compoundnbt1;
+         } catch (Exception e) {
+            LogManager.getLogger().error("A TileEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", tileentity.getClass().getName(), e);
+            return null;
+         }
       } else {
          CompoundNBT compoundnbt = this.field_201618_i.get(p_223134_1_);
          if (compoundnbt != null) {
@@ -454,23 +533,60 @@
    }
 
    public void func_177414_a(@Nullable Entity p_177414_1_, AxisAlignedBB p_177414_2_, List<Entity> p_177414_3_, @Nullable Predicate<? super Entity> p_177414_4_) {
-      int i = MathHelper.func_76128_c((p_177414_2_.field_72338_b - 2.0D) / 16.0D);
-      int j = MathHelper.func_76128_c((p_177414_2_.field_72337_e + 2.0D) / 16.0D);
-      i = MathHelper.func_76125_a(i, 0, this.field_76645_j.length - 1);
-      j = MathHelper.func_76125_a(j, 0, this.field_76645_j.length - 1);
+      int i = MathHelper.func_76128_c((p_177414_2_.field_72338_b - this.field_76637_e.getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.func_76128_c((p_177414_2_.field_72337_e + this.field_76637_e.getMaxEntityRadius()) / 16.0D);
+      /*
+      i = MathHelper.clamp(i, 0, this.entityLists.length - 1);
+      j = MathHelper.clamp(j, 0, this.entityLists.length - 1);
 
+       */
+
+      i = MathHelper.func_76125_a(i, 0, this.entitySlices.length - 1);
+      j = MathHelper.func_76125_a(j, 0, this.entitySlices.length - 1);
+
+      for (int k = i; k <= j; ++k) {
+         if (!this.entitySlices[k].isEmpty()) {
+            Iterator iterator = this.entitySlices[k].iterator();
+
+            while (iterator.hasNext()) {
+               Entity entity1 = (Entity) iterator.next();
+               if (entity1.shouldBeRemoved) continue; // Paper
+
+               if (entity1.func_174813_aQ().func_72326_a(p_177414_2_) && entity1 != p_177414_1_) {
+                  if (p_177414_4_ == null || p_177414_4_.test(entity1)) {
+                     p_177414_3_.add(entity1);
+                  }
+
+                  if (entity1 instanceof EnderDragonEntity) {
+                     EnderDragonPartEntity[] aentitycomplexpart = ((EnderDragonPartEntity) entity1).field_213852_b.func_213404_dT();
+                     int l = aentitycomplexpart.length;
+
+                     for (int i1 = 0; i1 < l; ++i1) {
+                        EnderDragonPartEntity entitycomplexpart = aentitycomplexpart[i1];
+
+                        if (entitycomplexpart != p_177414_1_ && entitycomplexpart.func_174813_aQ().func_72326_a(p_177414_2_) && (p_177414_4_ == null || p_177414_4_.test(entitycomplexpart))) {
+                           p_177414_3_.add(entitycomplexpart);
+                        }
+                     }
+                  }
+               }
+            }
+         }
+      }
+
+      /*
       for(int k = i; k <= j; ++k) {
-         if (!this.field_76645_j[k].isEmpty()) {
-            for(Entity entity : this.field_76645_j[k]) {
-               if (entity.func_174813_aQ().func_72326_a(p_177414_2_) && entity != p_177414_1_) {
-                  if (p_177414_4_ == null || p_177414_4_.test(entity)) {
-                     p_177414_3_.add(entity);
+         if (!this.entityLists[k].isEmpty()) {
+            for(Entity entity : this.entityLists[k]) {
+               if (entity.getBoundingBox().intersects(aabb) && entity != entityIn) {
+                  if (filter == null || filter.test(entity)) {
+                     listToFill.add(entity);
                   }
 
                   if (entity instanceof EnderDragonEntity) {
-                     for(EnderDragonPartEntity enderdragonpartentity : ((EnderDragonEntity)entity).func_213404_dT()) {
-                        if (enderdragonpartentity != p_177414_1_ && enderdragonpartentity.func_174813_aQ().func_72326_a(p_177414_2_) && (p_177414_4_ == null || p_177414_4_.test(enderdragonpartentity))) {
-                           p_177414_3_.add(enderdragonpartentity);
+                     for(EnderDragonPartEntity enderdragonpartentity : ((EnderDragonEntity)entity).getDragonParts()) {
+                        if (enderdragonpartentity != entityIn && enderdragonpartentity.getBoundingBox().intersects(aabb) && (filter == null || filter.test(enderdragonpartentity))) {
+                           listToFill.add(enderdragonpartentity);
                         }
                      }
                   }
@@ -479,38 +595,109 @@
          }
       }
 
+       */
+
    }
 
    public <T extends Entity> void func_217313_a(@Nullable EntityType<?> p_217313_1_, AxisAlignedBB p_217313_2_, List<? super T> p_217313_3_, Predicate<? super T> p_217313_4_) {
+
       int i = MathHelper.func_76128_c((p_217313_2_.field_72338_b - 2.0D) / 16.0D);
       int j = MathHelper.func_76128_c((p_217313_2_.field_72337_e + 2.0D) / 16.0D);
-      i = MathHelper.func_76125_a(i, 0, this.field_76645_j.length - 1);
-      j = MathHelper.func_76125_a(j, 0, this.field_76645_j.length - 1);
 
+      i = MathHelper.func_76125_a(i, 0, this.entitySlices.length - 1);
+      j = MathHelper.func_76125_a(j, 0, this.entitySlices.length - 1);
+
+      for (int k = i; k <= j; ++k) {
+         Iterator iterator = this.entitySlices[k].iterator(); // Spigot
+
+         while (iterator.hasNext()) {
+            T entity = (T) iterator.next(); // CraftBukkit - decompile error
+            if (entity.shouldBeRemoved) continue; // Paper
+
+            if ((p_217313_1_ == null || entity.func_200600_R() == p_217313_1_) && entity.func_174813_aQ().func_72326_a(p_217313_2_) && p_217313_4_.test(entity)) {
+               p_217313_3_.add(entity);
+            }
+         }
+      }
+
+      /*
+      int i = MathHelper.floor((aabb.minY - this.world.getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.floor((aabb.maxY + this.world.getMaxEntityRadius()) / 16.0D);
+      i = MathHelper.clamp(i, 0, this.entityLists.length - 1);
+      j = MathHelper.clamp(j, 0, this.entityLists.length - 1);
+
       for(int k = i; k <= j; ++k) {
-         for(Entity entity : this.field_76645_j[k].func_219790_a(Entity.class)) {
-            if ((p_217313_1_ == null || entity.func_200600_R() == p_217313_1_) && entity.func_174813_aQ().func_72326_a(p_217313_2_) && p_217313_4_.test((T)entity)) {
-               p_217313_3_.add((T)entity);
+         for(Entity entity : this.entityLists[k].getByClass(Entity.class)) {
+            if ((entitytypeIn == null || entity.getType() == entitytypeIn) && entity.getBoundingBox().intersects(aabb) && filter.test((T)entity)) {
+               list.add((T)entity);
             }
          }
       }
 
+       */
    }
 
+   private final int[] itemCounts = new int[16];
+   private final int[] inventoryEntityCounts = new int[16];
+
    public <T extends Entity> void func_177430_a(Class<? extends T> p_177430_1_, AxisAlignedBB p_177430_2_, List<T> p_177430_3_, @Nullable Predicate<? super T> p_177430_4_) {
+
       int i = MathHelper.func_76128_c((p_177430_2_.field_72338_b - 2.0D) / 16.0D);
       int j = MathHelper.func_76128_c((p_177430_2_.field_72337_e + 2.0D) / 16.0D);
-      i = MathHelper.func_76125_a(i, 0, this.field_76645_j.length - 1);
-      j = MathHelper.func_76125_a(j, 0, this.field_76645_j.length - 1);
 
+      i = MathHelper.func_76125_a(i, 0, this.entitySlices.length - 1);
+      j = MathHelper.func_76125_a(j, 0, this.entitySlices.length - 1);
+
+      // Paper start
+      int[] counts;
+      if (ItemEntity.class.isAssignableFrom(p_177430_1_)) {
+         counts = itemCounts;
+      } else if (IInventory.class.isAssignableFrom(p_177430_1_)) {
+         counts = inventoryEntityCounts;
+      } else {
+         counts = null;
+      }
+      // Paper end
+      for (int k = i; k <= j; ++k) {
+         if (counts != null && counts[k] <= 0) continue; // Paper - Don't check a chunk if it doesn't have the type we are looking for
+         Iterator iterator = this.entitySlices[k].iterator(); // Spigot
+
+         // Paper start - Don't search for inventories if we have none, and that is all we want
+         /*
+          * We check if they want inventories by seeing if it is the static `IEntitySelector.d`
+          *
+          * Make sure the inventory selector stays in sync.
+          * It should be the one that checks `var1 instanceof IInventory && var1.isAlive()`
+          */
+         if (p_177430_4_ == EntityPredicates.field_96566_b && inventoryEntityCounts[k] <= 0) continue;
+         // Paper end
+         while (iterator.hasNext()) {
+            T t0 = (T) iterator.next(); // CraftBukkit - decompile error
+            if (t0.shouldBeRemoved) continue; // Paper
+
+            if (p_177430_1_.isInstance(t0) && t0.func_174813_aQ().func_72326_a(p_177430_2_) && (p_177430_4_ == null || p_177430_4_.test(t0))) { // Spigot - instance check
+               p_177430_3_.add(t0);
+            }
+         }
+      }
+
+
+      /*
+      int i = MathHelper.floor((aabb.minY - this.world.getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.floor((aabb.maxY + this.world.getMaxEntityRadius()) / 16.0D);
+      i = MathHelper.clamp(i, 0, this.entityLists.length - 1);
+      j = MathHelper.clamp(j, 0, this.entityLists.length - 1);
+
       for(int k = i; k <= j; ++k) {
-         for(T t : this.field_76645_j[k].func_219790_a(p_177430_1_)) {
-            if (t.func_174813_aQ().func_72326_a(p_177430_2_) && (p_177430_4_ == null || p_177430_4_.test(t))) {
-               p_177430_3_.add(t);
+         for(T t : this.entityLists[k].getByClass(entityClass)) {
+            if (t.getBoundingBox().intersects(aabb) && (filter == null || filter.test(t))) {
+               listToFill.add(t);
             }
          }
       }
 
+
+       */
    }
 
    public boolean func_76621_g() {
@@ -531,6 +718,11 @@
       };
       Sets.newHashSet(this.field_150816_i.keySet()).stream().filter(predicate).forEach(this.field_76637_e::func_175713_t);
 
+      for (TileEntity tileEntity : field_150816_i.values()) {
+         tileEntity.func_145836_u();
+         tileEntity.func_195044_w();
+      }
+
       for(int i = 0; i < this.field_76652_q.length; ++i) {
          ChunkSection chunksection = this.field_76652_q[i];
          if ((p_227073_4_ & 1 << i) == 0) {
@@ -584,8 +776,8 @@
       return this.field_150816_i;
    }
 
-   public ClassInheritanceMultiMap<Entity>[] func_177429_s() {
-      return this.field_76645_j;
+   public List<Entity>[] getEntityLists() {
+      return this.entitySlices;
    }
 
    public CompoundNBT func_201579_g(BlockPos p_201579_1_) {
@@ -594,7 +786,7 @@
 
    public Stream<BlockPos> func_217304_m() {
       return StreamSupport.stream(BlockPos.func_191531_b(this.field_212816_F.func_180334_c(), 0, this.field_212816_F.func_180333_d(), this.field_212816_F.func_180332_e(), 255, this.field_212816_F.func_180330_f()).spliterator(), false).filter((p_217312_1_) -> {
-         return this.func_180495_p(p_217312_1_).func_185906_d() != 0;
+         return this.func_180495_p(p_217312_1_).getLightValue(func_177412_p(), p_217312_1_) != 0;
       });
    }
 
@@ -699,9 +891,9 @@
    private TileEntity func_212815_a(BlockPos p_212815_1_, CompoundNBT p_212815_2_) {
       TileEntity tileentity;
       if ("DUMMY".equals(p_212815_2_.func_74779_i("id"))) {
-         Block block = this.func_180495_p(p_212815_1_).func_177230_c();
-         if (block instanceof ITileEntityProvider) {
-            tileentity = ((ITileEntityProvider)block).func_196283_a_(this.field_76637_e);
+         BlockState state = this.func_180495_p(p_212815_1_);
+         if (state.hasTileEntity()) {
+            tileentity = state.createTileEntity(this.field_76637_e);
          } else {
             tileentity = null;
             field_150817_t.warn("Tried to load a DUMMY block entity @ {} but found not block entity block {} at location", p_212815_1_, this.func_180495_p(p_212815_1_));
@@ -790,4 +982,30 @@
       QUEUED,
       CHECK;
    }
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link AnvilChunkLoader}.
+    */
+   @java.lang.Deprecated
+   @javax.annotation.Nullable
+   public final CompoundNBT writeCapsToNBT() {
+      return this.serializeCaps();
+   }
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link AnvilChunkLoader}.
+    */
+   @java.lang.Deprecated
+   public final void readCapsFromNBT(CompoundNBT tag) {
+      this.deserializeCaps(tag);
+   }
+
+   @Override
+   public World getWorldForge() {
+      return func_177412_p();
+   }
 }
